help.start()
demo()
sqrt(16)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
head(iris)
tapply(iris$Sepal.Length, iris$Species, summary)
?apply
apply(iris[, 1:4], 1, mean)
colmeans(iris)
colMeans(iris)
apply(iris[,1:4],1, mean)
apply(iris[,1:4],2, mean)
library(datasets)
data(mtcars)
head(mtcars)
dim(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
apply(mtcars, 2 mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpt, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
install.packages("KernSmooth")
library(KernSmooth)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "7cf86be9f18d809f49d2", secret = "7b9d7b2daa7fa2f46d8a442b8e9bd6f9285da6c9")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- Get("https://api.github.com/users/jtleek/repo", gtoken)
req <- GET("https://api.github.com/users/jtleek/repo", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
reqTest <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(reqTest)
req <- GET("https://github.com/jtleek/datasharing", gtoken)
stop_for_status(req)
content(req)
install.packages(xml2)
getwd()
install.packages("xml2")
library(xml2)
content(req)
reqSrf <- GET("https://github.com/worldtravelnread/datasharing", gtoken)
stop_for_status(reqSrf)
content(reqSrf)
library(xml)
library(XML)
fileUrl <- "https://github.com/jtleek/datasharing"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
doc <- htmlTreeParse(fileUrl, useInternal = TRUE)
source("/Users/sharonfrancisco/Documents/DataScience_JH/ReproducibleResearch/project2/code2.R")
